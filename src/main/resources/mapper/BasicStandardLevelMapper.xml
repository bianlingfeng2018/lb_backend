<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.libiao.customer.dal.mapper.BasicStandardLevelMapper">
  <resultMap id="BaseResultMap" type="com.libiao.customer.dal.model.BasicStandardLevel">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="standard_id" jdbcType="INTEGER" property="standardId" />
    <result column="level_name" jdbcType="VARCHAR" property="levelName" />
    <result column="min_value" jdbcType="VARCHAR" property="minValue" />
    <result column="contain_min" jdbcType="TINYINT" property="containMin" />
    <result column="max_value" jdbcType="VARCHAR" property="maxValue" />
    <result column="contain_max" jdbcType="TINYINT" property="containMax" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, standard_id, level_name, min_value, contain_min, max_value, contain_max
  </sql>
  <select id="selectByExample" parameterType="com.libiao.customer.dal.model.BasicStandardLevelExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from basic_standard_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from basic_standard_level
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from basic_standard_level
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.libiao.customer.dal.model.BasicStandardLevelExample">
    delete from basic_standard_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.libiao.customer.dal.model.BasicStandardLevel">
    insert into basic_standard_level (id, standard_id, level_name, 
      min_value, contain_min, max_value, 
      contain_max)
    values (#{id,jdbcType=BIGINT}, #{standardId,jdbcType=INTEGER}, #{levelName,jdbcType=VARCHAR}, 
      #{minValue,jdbcType=VARCHAR}, #{containMin,jdbcType=TINYINT}, #{maxValue,jdbcType=VARCHAR}, 
      #{containMax,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.libiao.customer.dal.model.BasicStandardLevel">
    insert into basic_standard_level
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="standardId != null">
        standard_id,
      </if>
      <if test="levelName != null">
        level_name,
      </if>
      <if test="minValue != null">
        min_value,
      </if>
      <if test="containMin != null">
        contain_min,
      </if>
      <if test="maxValue != null">
        max_value,
      </if>
      <if test="containMax != null">
        contain_max,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="standardId != null">
        #{standardId,jdbcType=INTEGER},
      </if>
      <if test="levelName != null">
        #{levelName,jdbcType=VARCHAR},
      </if>
      <if test="minValue != null">
        #{minValue,jdbcType=VARCHAR},
      </if>
      <if test="containMin != null">
        #{containMin,jdbcType=TINYINT},
      </if>
      <if test="maxValue != null">
        #{maxValue,jdbcType=VARCHAR},
      </if>
      <if test="containMax != null">
        #{containMax,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.libiao.customer.dal.model.BasicStandardLevelExample" resultType="java.lang.Long">
    select count(*) from basic_standard_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update basic_standard_level
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.standardId != null">
        standard_id = #{row.standardId,jdbcType=INTEGER},
      </if>
      <if test="row.levelName != null">
        level_name = #{row.levelName,jdbcType=VARCHAR},
      </if>
      <if test="row.minValue != null">
        min_value = #{row.minValue,jdbcType=VARCHAR},
      </if>
      <if test="row.containMin != null">
        contain_min = #{row.containMin,jdbcType=TINYINT},
      </if>
      <if test="row.maxValue != null">
        max_value = #{row.maxValue,jdbcType=VARCHAR},
      </if>
      <if test="row.containMax != null">
        contain_max = #{row.containMax,jdbcType=TINYINT},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update basic_standard_level
    set id = #{row.id,jdbcType=BIGINT},
      standard_id = #{row.standardId,jdbcType=INTEGER},
      level_name = #{row.levelName,jdbcType=VARCHAR},
      min_value = #{row.minValue,jdbcType=VARCHAR},
      contain_min = #{row.containMin,jdbcType=TINYINT},
      max_value = #{row.maxValue,jdbcType=VARCHAR},
      contain_max = #{row.containMax,jdbcType=TINYINT}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.libiao.customer.dal.model.BasicStandardLevel">
    update basic_standard_level
    <set>
      <if test="standardId != null">
        standard_id = #{standardId,jdbcType=INTEGER},
      </if>
      <if test="levelName != null">
        level_name = #{levelName,jdbcType=VARCHAR},
      </if>
      <if test="minValue != null">
        min_value = #{minValue,jdbcType=VARCHAR},
      </if>
      <if test="containMin != null">
        contain_min = #{containMin,jdbcType=TINYINT},
      </if>
      <if test="maxValue != null">
        max_value = #{maxValue,jdbcType=VARCHAR},
      </if>
      <if test="containMax != null">
        contain_max = #{containMax,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.libiao.customer.dal.model.BasicStandardLevel">
    update basic_standard_level
    set standard_id = #{standardId,jdbcType=INTEGER},
      level_name = #{levelName,jdbcType=VARCHAR},
      min_value = #{minValue,jdbcType=VARCHAR},
      contain_min = #{containMin,jdbcType=TINYINT},
      max_value = #{maxValue,jdbcType=VARCHAR},
      contain_max = #{containMax,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>